[global_tags]

[agent]
  interval = "10s"

##Rounds collection interval to interval ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true

##Telegraf will send metrics to outputs in batches of at most metric_batch_size metrics.
##This controls the size of writes that Telegraf sends to output plugins.
  metric_batch_size = 1000

##Maximum number of unwritten metrics per output.
##Increasing this value allows for longer periods of output downtime without dropping metrics
##at the cost of higher maximum memory usage.
  metric_buffer_limit = 10000

##Collection jitter is used to jitter the collection by a random interval. 
##Each plugin will sleep for a random time within jitter before collecting.
##This can be used to avoid many plugins querying things like sysfs at the same time, which can have a measurable effect on the system.
  collection_jitter = "0s"

##Default flushing interval for all outputs. Maximum flush_interval will be flush_interval + flush_jitter.
  flush_interval = "10s"
  flush_jitter = "0s"

##Collected metrics are rounded to the precision specified as an interval.
  precision = ""

##Override default hostname, if empty use os.Hostname()
  hostname = "telegraf-metrics"

##If set to true, do no set the "host" tag in the telegraf agent
  omit_hostname = false

[[outputs.influxdb]]
  ## The full HTTP or UDP URL for your InfluxDB instance.
  ##
  ## Multiple URLs can be specified for a single cluster, only ONE of the
  ## urls will be written to each interval.
  # urls = ["unix:///var/run/influxdb.sock"]
  # urls = ["udp://127.0.0.1:8089"]
  urls = ["http://influxdb:8086"]

  ## HTTP User-Agent
  user_agent = "telegraf_ki_k8s"

  ## The target database for metrics; will be created as needed.
  ## For UDP url endpoint database needs to be configured on server side.
  database = "telegraf"

  username = "admin"
  password = "password"

[[inputs.cpu]]
  ## Whether to report per-cpu stats or not
  percpu = true
  ## Whether to report total system cpu stats or not
  totalcpu = true
  ## If true, collect raw CPU time metrics.
  collect_cpu_time = false
  ## If true, compute and report the sum of all non-idle CPU states.
  report_active = false

[[inputs.disk]]

  ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs"]

[[inputs.diskio]]

[[inputs.kernel]]

[[inputs.mem]]

[[inputs.processes]]

[[inputs.swap]]

[[inputs.system]]

# [[inputs.kube_inventory]]
#     url = "https://kubernetes"
#     namespace = "default"
#     resource_include = [ "deployments", "nodes", "pods" ]
#     insecure_skip_verify = true

[[outputs.file]]
## Files to write to, "stdout" is a specially handled file.
    files = ["stdout"] 
## Data format to output.
    data_format = "influx"
[[inputs.kubernetes]]
    url = "https://192.168.49.2:10250"
    insecure_skip_verify = true

# metrics about docker containers
[[inputs.docker]]
  endpoint = "unix:///var/run/docker.sock"
## Set to true to collect Swarm metrics(desired_replicas, running_replicas)
## Note: configure this in one of the manager nodes in a Swarm cluster.
## configuring in multiple Swarm managers results in duplication of metrics.
  gather_services = false
## Only collect metrics for these containers, collect all if empty 
  container_names = []
## Set the source tag for the metrics to the container ID hostname, eg first 12 chars
  source_tag = false
## Containers to include and exclude. Collect all if empty. Globs accepted.
  container_name_include = []
  container_name_exclude = []
## Timeout for docker list, info, and stats commands
  timeout = "5s"
## Whether to report for each container per-device blkio (8:0, 8:1...) and
## network (eth0, eth1, ...) stats or not
  perdevice = true
## Whether to report for each container total blkio and network stats or not
  total = false
## docker labels to include and exclude as tags.  Globs accepted.
## Note that an empty array for both will include all labels as tags
  docker_label_include = []
  docker_label_exclude = []
## Which environment variables should we use as a tag
  tag_env = ["JAVA_HOME", "HEAP_SIZE"]
  